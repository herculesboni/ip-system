import React, { useState, useEffect, useCallback } from 'react';
import { Star, Trophy, Target, Calendar, Zap, CheckCircle, Plus, BarChart3, Clock, BookOpen, Dumbbell, Droplets, Coffee, Bed, Brain, Heart, Gift, Award, Eye, ChevronLeft, ChevronRight, RotateCcw, HelpCircle, X } from 'lucide-react';

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–ª–∞–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const InteractiveEye = ({ scale = 1 }) => {
  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });
  const [eyeRef, setEyeRef] = useState(null);

  useEffect(() => {
    const handleMouseMove = (e) => {
      if (eyeRef) {
        const rect = eyeRef.getBoundingClientRect();
        const eyeCenterX = rect.left + rect.width / 2;
        const eyeCenterY = rect.top + rect.height / 2;
        const angle = Math.atan2(e.clientY - eyeCenterY, e.clientX - eyeCenterX);
        const distance = Math.min(Math.hypot(e.clientX - eyeCenterX, e.clientY - eyeCenterY) / 150, 1);
        
        setMousePos({
          x: Math.cos(angle) * distance * 4 * scale,
          y: Math.sin(angle) * distance * 4 * scale
        });
      }
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, [eyeRef, scale]);

  return (
    <div 
      ref={setEyeRef} 
      className="w-12 h-12 md:w-16 md:h-16 bg-neutral-900 rounded-full flex items-center justify-center shadow-sm relative border border-neutral-800"
    >
      <div className="w-8 h-8 md:w-12 md:h-12 bg-white rounded-full flex items-center justify-center relative overflow-hidden">
        <div 
          className="w-5 h-5 md:w-7 md:h-7 rounded-full flex items-center justify-center transition-transform duration-100 ease-out"
          style={{ 
            background: 'radial-gradient(circle, #171717 40%, #0a0a0a 70%, #000000 100%)',
            transform: `translate(${mousePos.x}px, ${mousePos.y}px)`,
          }}
        >
          <div className="w-2 h-2 md:w-3 md:h-3 bg-sky-500 rounded-full relative">
            <div className="w-0.5 h-0.5 md:w-1 md:h-1 bg-white rounded-full absolute top-0.5 left-0.5 opacity-60"></div>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∫–∏
const HelpButton = () => {
  const [showHelp, setShowHelp] = useState(false);

  return (
    <>
      {/* –ù–µ–Ω–∞–≤—è–∑—á–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ */}
      <button
        onClick={() => setShowHelp(true)}
        className="fixed bottom-6 right-6 w-10 h-10 bg-white border border-neutral-300 rounded-full flex items-center justify-center shadow-sm hover:shadow-md transition-all opacity-60 hover:opacity-100 z-40"
        title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"
      >
        <HelpCircle className="w-5 h-5 text-neutral-600" />
      </button>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      {showHelp && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center p-4 z-50" onClick={() => setShowHelp(false)}>
          <div className="bg-white rounded-3xl shadow-2xl max-w-lg w-full max-h-[80vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <div className="p-6">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-medium text-neutral-900">–û —Å–∏—Å—Ç–µ–º–µ i.p</h2>
                <button
                  onClick={() => setShowHelp(false)}
                  className="p-2 hover:bg-neutral-100 rounded-full transition-colors"
                >
                  <X className="w-4 h-4 text-neutral-600" />
                </button>
              </div>

              {/* –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å */}
              <div className="mb-6">
                <h3 className="text-lg font-medium text-neutral-800 mb-3 flex items-center">
                  <span className="text-xl mr-2">üîí</span>
                  –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                </h3>
                <div className="space-y-2 text-sm text-neutral-600 font-light bg-neutral-50 rounded-xl p-4">
                  <p>‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ</p>
                  <p>‚Ä¢ –ù–∏–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã</p>
                  <p>‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ–ª–∞–π–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏</p>
                  <p>‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏</p>
                </div>
              </div>

              {/* –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è */}
              <div className="mb-6">
                <h3 className="text-lg font-medium text-neutral-800 mb-3 flex items-center">
                  <span className="text-xl mr-2">üìñ</span>
                  –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
                </h3>
                <div className="space-y-3 text-sm text-neutral-600 font-light">
                  <div>
                    <p className="font-medium text-neutral-800 mb-1">–†–∏—Ç—É–∞–ª—ã</p>
                    <p>–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ö–∞–∂–¥—ã–π —Ä–∏—Ç—É–∞–ª –¥–∞–µ—Ç –æ—á–∫–∏.</p>
                  </div>
                  <div>
                    <p className="font-medium text-neutral-800 mb-1">–ó–∞–¥–∞—á–∏</p>
                    <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 1-3 –æ—á–∫–∞.</p>
                  </div>
                  <div>
                    <p className="font-medium text-neutral-800 mb-1">–ù–∞–≥—Ä–∞–¥—ã</p>
                    <p>–¢—Ä–∞—Ç—å—Ç–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –Ω–∞ –ø—Ä–∏—è—Ç–Ω—ã–µ –≤–µ—â–∏.</p>
                  </div>
                  <div>
                    <p className="font-medium text-neutral-800 mb-1">–ù–∞–≤–∏–≥–∞—Ü–∏—è</p>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üê ‚Üí –∏–ª–∏ —Å–≤–∞–π–ø—ã –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏.</p>
                  </div>
                </div>
              </div>

              {/* –ü—Ä–∏–Ω—Ü–∏–ø */}
              <div className="mb-4">
                <div className="bg-neutral-50 rounded-xl p-4 text-center">
                  <p className="text-sm text-neutral-700 font-light italic leading-relaxed">
                    "–†–∞–¥—É–µ–º —Å–µ–±—è –Ω–µ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏ –¥–µ–Ω—å–≥–∏, 
                    –∞ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –¥–æ–¥–µ–ª–∞–ª–∏ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞"
                  </p>
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
              <div className="text-center">
                <button
                  onClick={() => setShowHelp(false)}
                  className="bg-neutral-900 text-white px-6 py-2 rounded-xl hover:bg-neutral-800 transition-colors font-medium text-sm"
                >
                  –ü–æ–Ω—è—Ç–Ω–æ!
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

const App = () => {
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [currentScreen, setCurrentScreen] = useState(0);
  const [week, setWeek] = useState(() => parseInt(localStorage.getItem('ip-week') || '1'));
  const [points, setPoints] = useState(() => parseInt(localStorage.getItem('ip-points') || '0'));
  const [lastResetDate, setLastResetDate] = useState(() => localStorage.getItem('ip-lastReset') || new Date().toDateString());
  
  // –†–∏—Ç—É–∞–ª—ã
  const [rituals, setRituals] = useState(() => {
    const saved = localStorage.getItem('ip-rituals');
    if (saved) return JSON.parse(saved);
    return {
      wakeup: false, brush_morning: false, breakfast: false, sport: false,
      water_morning: false, vitamins: false, learning_morning: false,
      water: false, no_junk_food: false, no_sugar: false,
      foreign_language: false, book_speed: false, no_social: false,
      planning: false, meditation: false, day_review: false,
      sleep: false, brush_evening: false,
      outdoor_weekend: false, week_review: false
    };
  });

  // –ó–∞–¥–∞—á–∏ –∏ –ø—Ä–æ—á–µ–µ
  const [tasks, setTasks] = useState(() => JSON.parse(localStorage.getItem('ip-tasks') || '[]'));
  const [newTask, setNewTask] = useState('');
  const [taskPriority, setTaskPriority] = useState(1);
  const [achievements, setAchievements] = useState(() => JSON.parse(localStorage.getItem('ip-achievements') || '[]'));
  const [weekPlan, setWeekPlan] = useState(() => JSON.parse(localStorage.getItem('ip-weekPlan') || '{}'));
  const [rewards, setRewards] = useState(() => {
    const saved = localStorage.getItem('ip-rewards');
    if (saved) return JSON.parse(saved);
    return [
      { id: 1, name: '–í–∫—É—Å–Ω—ã–π –∫–æ—Ñ–µ', cost: 10, claimed: false },
      { id: 2, name: '–ú–∞—Å—Å–∞–∂/SPA', cost: 80, claimed: false },
      { id: 3, name: '–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ', cost: 40, claimed: false },
      { id: 4, name: '–£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ', cost: 60, claimed: false },
      { id: 5, name: '–ù–æ–≤–∞—è –≤–µ—â—å', cost: 70, claimed: false },
      { id: 6, name: '–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å', cost: 30, claimed: false },
      { id: 7, name: '–ü–æ–µ—Å—Ç—å –≤—Ä–µ–¥–Ω–æ–µ', cost: 35, claimed: false },
      { id: 8, name: '–°—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ', cost: 50, claimed: false },
    ];
  });

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∏—Ç—É–∞–ª–æ–≤
  const ritualConfig = {
    wakeup: { name: '–ü–æ–¥—ä—ë–º –≤ —Å—Ä–æ–∫', points: 2, icon: Clock, color: 'text-blue-600', time: 'morning', desc: '–í –æ–¥–Ω–æ –≤—Ä–µ–º—è' },
    brush_morning: { name: '–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã', points: 1, icon: Star, color: 'text-emerald-500', time: 'morning', desc: '–£—Ç—Ä–æ–º' },
    breakfast: { name: '–°–¥–µ–ª–∞—Ç—å –∑–∞–≤—Ç—Ä–∞–∫', points: 2, icon: Coffee, color: 'text-amber-600', time: 'morning', desc: '–ó–¥–æ—Ä–æ–≤—ã–π' },
    sport: { name: '–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–ø–æ—Ä—Ç', points: 4, icon: Dumbbell, color: 'text-red-500', time: 'morning', desc: '30 –º–∏–Ω' },
    water_morning: { name: '–°—Ç–∞–∫–∞–Ω –≤–æ–¥—ã', points: 1, icon: Droplets, color: 'text-cyan-500', time: 'morning', desc: '–ù–∞—Ç–æ—â–∞–∫' },
    vitamins: { name: '–í–∏—Ç–∞–º–∏–Ω—ã', points: 1, icon: Heart, color: 'text-pink-500', time: 'morning', desc: '–° –µ–¥–æ–π' },
    learning_morning: { name: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', points: 4, icon: BookOpen, color: 'text-violet-600', time: 'morning', desc: '30 –º–∏–Ω –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
    
    water: { name: '2–ª –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å', points: 3, icon: Droplets, color: 'text-blue-500', time: 'all-day', desc: '–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è' },
    no_junk_food: { name: '–ë–µ–∑ —Ñ–∞—Å—Ç—Ñ—É–¥–∞', points: 3, icon: Target, color: 'text-green-600', time: 'all-day', desc: '–í–µ—Å—å –¥–µ–Ω—å' },
    no_sugar: { name: '–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞', points: 3, icon: Zap, color: 'text-yellow-500', time: 'all-day', desc: '–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∞—Ö–∞—Ä–∞' },
    foreign_language: { name: '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫', points: 4, icon: BookOpen, color: 'text-purple-600', time: 'flexible', desc: '30 –º–∏–Ω –ø—Ä–∞–∫—Ç–∏–∫–∏' },
    book_speed: { name: '–ë—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ', points: 4, icon: Brain, color: 'text-indigo-600', time: 'flexible', desc: '15-30 –º–∏–Ω' },
    no_social: { name: '–ë–µ–∑ —Å–æ—Ü—Å–µ—Ç–µ–π/–º–µ–º–æ–≤', points: 3, icon: Target, color: 'text-neutral-600', time: 'all-day', desc: '–ß–∞—Å –ø–æ–¥—Ä—è–¥ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
    
    planning: { name: '–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞', points: 3, icon: Calendar, color: 'text-indigo-500', time: 'evening', desc: '–í–µ—á–µ—Ä–æ–º' },
    meditation: { name: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è', points: 3, icon: Brain, color: 'text-purple-500', time: 'evening', desc: '10-15 –º–∏–Ω—É—Ç' },
    day_review: { name: '–†–∞–∑–±–æ—Ä –¥–Ω—è', points: 2, icon: BarChart3, color: 'text-orange-500', time: 'evening', desc: '–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ' },
    sleep: { name: '–°–æ–Ω –≤ —Å—Ä–æ–∫', points: 4, icon: Bed, color: 'text-slate-500', time: 'night', desc: '–í –æ–¥–Ω–æ –≤—Ä–µ–º—è' },
    brush_evening: { name: '–ü–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã', points: 1, icon: Star, color: 'text-emerald-500', time: 'night', desc: '–ü–µ—Ä–µ–¥ —Å–Ω–æ–º' },
    
    outdoor_weekend: { name: '4 —á–∞—Å–∞ –Ω–∞ —É–ª–∏—Ü–µ', points: 8, icon: Coffee, color: 'text-green-500', time: 'weekend', desc: '–ó–∞ –Ω–µ–¥–µ–ª—é' },
    week_review: { name: '–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏', points: 6, icon: Trophy, color: 'text-yellow-500', time: 'weekend', desc: '–ê–Ω–∞–ª–∏–∑' }
  };

  const financialBonuses = [
    { id: 1, name: '–ü–æ–ª—É—á–∏–ª –¥–æ—Ö–æ–¥', points: 100, desc: '–õ—é–±–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫' },
    { id: 2, name: '–ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞', points: 200, desc: '–ë–æ–ª—å—à–∞—è —Å—É–º–º–∞' },
    { id: 3, name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –æ–∫—É–ø–∏–ª–∞—Å—å', points: 150, desc: '–ü—Ä–∏–±—ã–ª—å –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π' },
  ];

  const screens = [
    { name: '–†–∏—Ç—É–∞–ª—ã', icon: Trophy },
    { name: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', icon: Calendar },  
    { name: '–ù–∞–≥—Ä–∞–¥—ã', icon: Gift },
    { name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon: BarChart3 }
  ];

  const maxPoints = 70;
  const weekProgress = Math.min((points / maxPoints) * 100, 100);

  // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞
  const getTimeUntilReset = () => {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    const diff = tomorrow - now;
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours}—á ${minutes}–º`;
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  useEffect(() => { localStorage.setItem('ip-week', week.toString()); }, [week]);
  useEffect(() => { localStorage.setItem('ip-points', points.toString()); }, [points]);
  useEffect(() => { localStorage.setItem('ip-rituals', JSON.stringify(rituals)); }, [rituals]);
  useEffect(() => { localStorage.setItem('ip-tasks', JSON.stringify(tasks)); }, [tasks]);
  useEffect(() => { localStorage.setItem('ip-achievements', JSON.stringify(achievements)); }, [achievements]);
  useEffect(() => { localStorage.setItem('ip-weekPlan', JSON.stringify(weekPlan)); }, [weekPlan]);
  useEffect(() => { localStorage.setItem('ip-rewards', JSON.stringify(rewards)); }, [rewards]);
  useEffect(() => { localStorage.setItem('ip-lastReset', lastResetDate); }, [lastResetDate]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const addAchievement = useCallback((text) => {
    const newAchievement = { 
      id: Date.now(), 
      text, 
      time: new Date().toLocaleTimeString() 
    };
    setAchievements(prev => [...prev, newAchievement]);
  }, []);

  // –õ–æ–≥–∏–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤
  const toggleRitual = useCallback((ritualKey) => {
    const ritual = ritualConfig[ritualKey];
    if (!ritual) return;

    setRituals(prevRituals => {
      const isCurrentlyActive = prevRituals[ritualKey];
      const newRituals = { ...prevRituals, [ritualKey]: !isCurrentlyActive };

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏
      if (!isCurrentlyActive) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
        setPoints(prevPoints => {
          const newPoints = prevPoints + ritual.points;
          console.log(`${ritual.name}: +${ritual.points} –æ—á–∫–æ–≤ (–≤—Å–µ–≥–æ: ${newPoints})`);
          return newPoints;
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–∏—Ç—É–∞–ª—ã
        const completedCount = Object.values(newRituals).filter(Boolean).length;
        if (completedCount === 5) addAchievement('üåü 5 —Ä–∏—Ç—É–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
        if (completedCount === 10) addAchievement('üî• 10 —Ä–∏—Ç—É–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å!');
        if (completedCount === 15) addAchievement('üíé 15 —Ä–∏—Ç—É–∞–ª–æ–≤ - –æ—Ç–ª–∏—á–Ω–æ!');
        if (completedCount === 20) addAchievement('üèÜ –í—Å–µ —Ä–∏—Ç—É–∞–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
      } else {
        // –£–±–∏—Ä–∞–µ–º –æ—á–∫–∏
        setPoints(prevPoints => Math.max(0, prevPoints - ritual.points));
      }

      return newRituals;
    });
  }, [ritualConfig, addAchievement]);

  // –õ–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á
  const addTask = useCallback(() => {
    if (!newTask.trim()) return;
    
    const task = {
      id: Date.now(),
      text: newTask.trim(),
      priority: taskPriority,
      completed: false
    };
    
    setTasks(prev => [...prev, task]);
    setNewTask('');
  }, [newTask, taskPriority]);

  const toggleTask = useCallback((taskId) => {
    setTasks(prevTasks => {
      const taskIndex = prevTasks.findIndex(t => t.id === taskId);
      if (taskIndex === -1) return prevTasks;

      const task = prevTasks[taskIndex];
      const newTasks = [...prevTasks];
      newTasks[taskIndex] = { ...task, completed: !task.completed };

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏
      if (!task.completed) {
        setPoints(prevPoints => prevPoints + task.priority);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∑–∞–¥–∞—á–∏
        const completedCount = newTasks.filter(t => t.completed).length;
        if (completedCount === 5) addAchievement('üìã 5 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
        if (completedCount === 10) addAchievement('üí™ 10 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
        if (completedCount === 15) addAchievement('üöÄ 15 –∑–∞–¥–∞—á - –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ!');
      } else {
        setPoints(prevPoints => Math.max(0, prevPoints - task.priority));
      }

      return newTasks;
    });
  }, [addAchievement]);

  // –ù–∞–≥—Ä–∞–¥—ã
  const claimReward = useCallback((rewardId) => {
    setRewards(prevRewards => {
      const rewardIndex = prevRewards.findIndex(r => r.id === rewardId);
      if (rewardIndex === -1) return prevRewards;

      const reward = prevRewards[rewardIndex];
      if (points < reward.cost || reward.claimed) return prevRewards;

      setPoints(prevPoints => prevPoints - reward.cost);
      addAchievement(`üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${reward.name}!`);

      const newRewards = [...prevRewards];
      newRewards[rewardIndex] = { ...reward, claimed: true };

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      setTimeout(() => {
        setRewards(prev => prev.map(r => 
          r.id === rewardId ? { ...r, claimed: false } : r
        ));
      }, 7 * 24 * 60 * 60 * 1000);

      return newRewards;
    });
  }, [points, addAchievement]);

  // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã
  const addFinancialBonus = useCallback((bonusId) => {
    const bonus = financialBonuses.find(b => b.id === bonusId);
    if (!bonus) return;

    setPoints(prevPoints => prevPoints + bonus.points);
    addAchievement(`üí∞ ${bonus.name}: +${bonus.points} –æ—á–∫–æ–≤!`);
  }, [addAchievement]);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —ç–∫—Ä–∞–Ω–∞–º
  const changeScreen = useCallback((direction) => {
    setCurrentScreen(prev => {
      if (direction === 'next') {
        return prev >= screens.length - 1 ? 0 : prev + 1;
      } else {
        return prev <= 0 ? screens.length - 1 : prev - 1;
      }
    });
  }, [screens.length]);

  // –°–≤–∞–π–ø –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
  useEffect(() => {
    let startX = 0;
    
    const handleTouchStart = (e) => {
      startX = e.touches[0].clientX;
    };

    const handleTouchEnd = (e) => {
      const endX = e.changedTouches[0].clientX;
      const diff = startX - endX;
      
      if (Math.abs(diff) > 50) {
        if (diff > 0) {
          changeScreen('next');
        } else {
          changeScreen('prev');
        }
      }
    };

    const handleKeydown = (e) => {
      if (e.key === 'ArrowLeft') changeScreen('prev');
      if (e.key === 'ArrowRight') changeScreen('next');
    };

    document.addEventListener('touchstart', handleTouchStart);
    document.addEventListener('touchend', handleTouchEnd);
    document.addEventListener('keydown', handleKeydown);

    return () => {
      document.removeEventListener('touchstart', handleTouchStart);
      document.removeEventListener('touchend', handleTouchEnd);
      document.removeEventListener('keydown', handleKeydown);
    };
  }, [changeScreen]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –æ—á–∫–∞–º
  useEffect(() => {
    const pointMilestones = [
      { points: 50, text: 'üéØ 50 –æ—á–∫–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ!' },
      { points: 100, text: 'üíØ 100 –æ—á–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!' },
      { points: 200, text: 'üèÖ 200 –æ—á–∫–æ–≤ - –æ—Ç–ª–∏—á–Ω–∞—è –Ω–µ–¥–µ–ª—è!' }
    ];

    pointMilestones.forEach(milestone => {
      if (points >= milestone.points && 
          !achievements.some(a => a.text === milestone.text)) {
        addAchievement(milestone.text);
      }
    });

    if (weekProgress >= 100 && 
        !achievements.some(a => a.text.includes('–Ω–µ–¥–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))) {
      addAchievement('üéä –ù–µ–¥–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }
  }, [points, weekProgress, achievements, addAchievement]);

  // –°–±—Ä–æ—Å –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å
  useEffect(() => {
    const checkNewDay = () => {
      const today = new Date().toDateString();
      if (today !== lastResetDate) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã
        setRituals(prev => {
          const newRituals = { ...prev };
          Object.keys(ritualConfig).forEach(key => {
            if (ritualConfig[key].time !== 'weekend') {
              newRituals[key] = false;
            }
          });
          return newRituals;
        });

        setLastResetDate(today);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é
        if (new Date().getDay() === 1) {
          setWeek(prev => prev + 1);
          addAchievement(`üéØ –ù–µ–¥–µ–ª—è ${week + 1} –Ω–∞—á–∞–ª–∞—Å—å!`);
        } else {
          addAchievement('üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å!');
        }
      }
    };

    checkNewDay();
    const interval = setInterval(checkNewDay, 60000);
    return () => clearInterval(interval);
  }, [lastResetDate, week, ritualConfig, addAchievement]);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∏—Ç—É–∞–ª–∞
  const RitualCard = ({ ritualKey, ritual }) => {
    const IconComponent = ritual.icon;
    const isActive = rituals[ritualKey];

    return (
      <div
        onClick={() => toggleRitual(ritualKey)}
        className={`group relative p-5 rounded-2xl cursor-pointer transition-all duration-300 border ${
          isActive 
            ? 'bg-neutral-900 text-white border-neutral-800 shadow-xl' 
            : 'bg-white border-neutral-200 hover:border-neutral-300 shadow-sm hover:shadow-md'
        }`}
      >
        <div className="flex items-start space-x-4">
          <div className={`flex-shrink-0 p-2 rounded-xl ${isActive ? 'bg-white bg-opacity-10' : 'bg-neutral-50'}`}>
            <IconComponent className={`w-6 h-6 ${isActive ? 'text-white' : ritual.color}`} />
          </div>
          <div className="flex-1 min-w-0">
            <h4 className={`font-medium text-base leading-tight mb-1 ${isActive ? 'text-white' : 'text-neutral-900'}`}>
              {ritual.name}
            </h4>
            <p className={`text-sm leading-relaxed mb-2 ${isActive ? 'text-neutral-300' : 'text-neutral-600'}`}>
              {ritual.desc}
            </p>
            <div className="flex items-center justify-between">
              <span className={`text-sm font-medium ${isActive ? 'text-neutral-400' : 'text-neutral-500'}`}>
                {ritual.points} –æ—á–∫–æ–≤
              </span>
              {isActive && <CheckCircle className="w-5 h-5 text-green-400" />}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä —ç–∫—Ä–∞–Ω–æ–≤
  const renderScreen = () => {
    switch (currentScreen) {
      case 0: // –†–∏—Ç—É–∞–ª—ã
        return (
          <div className="space-y-8">
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏ */}
            <div className="bg-white rounded-3xl shadow-sm p-8 border border-neutral-100">
              <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-6 mb-8">
                <div className="flex items-center space-x-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-neutral-800 to-neutral-900 rounded-2xl flex items-center justify-center text-white font-light text-2xl">
                    {week}
                  </div>
                  <div>
                    <h2 className="text-3xl font-light text-neutral-900">–ù–µ–¥–µ–ª—è {week}</h2>
                    <p className="text-neutral-600 font-light">{points} –æ—á–∫–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ</p>
                  </div>
                </div>
                <div className="flex items-center space-x-6">
                  <div className="text-center">
                    <RotateCcw className="w-8 h-8 text-neutral-400 mx-auto mb-2" />
                    <p className="text-xs text-neutral-500 font-medium">–°–±—Ä–æ—Å —á–µ—Ä–µ–∑</p>
                    <p className="text-xs text-neutral-700 font-medium">{getTimeUntilReset()}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <div className="flex justify-between items-center mb-3">
                  <span className="text-sm font-medium text-neutral-600">–ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
                  <span className="text-sm font-medium text-neutral-600">{points} / {maxPoints}</span>
                </div>
                <div className="w-full bg-neutral-100 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-neutral-600 to-neutral-800 h-2 rounded-full transition-all duration-700"
                    style={{ width: `${weekProgress}%` }}
                  />
                </div>
                <p className="text-xs text-neutral-500 mt-2 font-light">
                  –†–∏—Ç—É–∞–ª—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00
                </p>
              </div>
            </div>

            {/* –†–∏—Ç—É–∞–ª—ã */}
            <div className="bg-white rounded-3xl shadow-sm p-8 border border-neutral-100">
              <h3 className="text-2xl font-light text-neutral-900 mb-8">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã</h3>
              
              {/* –£—Ç—Ä–µ–Ω–Ω–∏–µ */}
              <div className="mb-10">
                <h4 className="text-lg font-medium text-neutral-800 mb-6 flex items-center">
                  <span className="text-2xl mr-3">üåÖ</span>
                  –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã
                </h4>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {Object.entries(ritualConfig)
                    .filter(([_, ritual]) => ritual.time === 'morning')
                    .map(([key, ritual]) => (
                      <RitualCard key={key} ritualKey={key} ritual={ritual} />
                    ))}
                </div>
              </div>

              {/* –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è */}
              <div className="mb-10">
                <h4 className="text-lg font-medium text-neutral-800 mb-6 flex items-center">
                  <span className="text-2xl mr-3">‚è∞</span>
                  –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
                </h4>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {Object.entries(ritualConfig)
                    .filter(([_, ritual]) => ritual.time === 'flexible' || ritual.time === 'all-day')
                    .map(([key, ritual]) => (
                      <RitualCard key={key} ritualKey={key} ritual={ritual} />
                    ))}
                </div>
              </div>

              {/* –í–µ—á–µ—Ä–Ω–∏–µ */}
              <div className="mb-10">
                <h4 className="text-lg font-medium text-neutral-800 mb-6 flex items-center">
                  <span className="text-2xl mr-3">üåô</span>
                  –í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã
                </h4>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {Object.entries(ritualConfig)
                    .filter(([_, ritual]) => ritual.time === 'evening' || ritual.time === 'night')
                    .map(([key, ritual]) => (
                      <RitualCard key={key} ritualKey={key} ritual={ritual} />
                    ))}
                </div>
              </div>

              {/* –ù–µ–¥–µ–ª—å–Ω—ã–µ */}
              <div>
                <h4 className="text-lg font-medium text-neutral-800 mb-6 flex items-center">
                  <span className="text-2xl mr-3">üèñÔ∏è</span>
                  –ù–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
                </h4>
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {Object.entries(ritualConfig)
                    .filter(([_, ritual]) => ritual.time === 'weekend')
                    .map(([key, ritual]) => (
                      <RitualCard key={key} ritualKey={key} ritual={ritual} />
                    ))}
                </div>
              </div>
            </div>

            {/* –ó–∞–¥–∞—á–∏ –¥–Ω—è */}
            <div className="bg-white rounded-3xl shadow-sm p-8 border border-neutral-100">
              <h3 className="text-2xl font-light text-neutral-900 mb-8">–ó–∞–¥–∞—á–∏ –¥–Ω—è</h3>
              
              <div className="flex flex-col lg:flex-row gap-4 mb-8">
                <input
                  type="text"
                  value={newTask}
                  onChange={(e) => setNewTask(e.target.value)}
                  placeholder="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É..."
                  className="flex-1 p-4 border border-neutral-200 rounded-2xl focus:border-neutral-400 focus:outline-none text-base font-light placeholder-neutral-400"
                  onKeyPress={(e) => e.key === 'Enter' && addTask()}
                />
                <div className="flex gap-3">
                  <select
                    value={taskPriority}
                    onChange={(e) => setTaskPriority(Number(e.target.value))}
                    className="p-4 border border-neutral-200 rounded-2xl focus:border-neutral-400 focus:outline-none text-base font-light"
                  >
                    <option value={1}>1 –æ—á–∫–æ</option>
                    <option value={2}>2 –æ—á–∫–∞</option>
                    <option value={3}>3 –æ—á–∫–∞</option>
                  </select>
                  <button
                    onClick={addTask}
                    className="bg-neutral-900 text-white p-4 rounded-2xl hover:bg-neutral-800 transition-colors"
                  >
                    <Plus className="w-6 h-6" />
                  </button>
                </div>
              </div>

              <div className="space-y-3 max-h-96 overflow-y-auto">
                {tasks.map(task => (
                  <div
                    key={task.id}
                    onClick={() => toggleTask(task.id)}
                    className={`p-5 rounded-2xl cursor-pointer transition-all border ${
                      task.completed
                        ? 'bg-neutral-50 border-neutral-200 opacity-60'
                        : 'bg-white border-neutral-200 hover:shadow-md hover:border-neutral-300'
                    } ${
                      task.priority === 1 ? 'border-l-4 border-l-emerald-400' :
                      task.priority === 2 ? 'border-l-4 border-l-amber-400' : 'border-l-4 border-l-red-400'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <span className={`font-light ${task.completed ? 'line-through text-neutral-500' : 'text-neutral-900'}`}>
                        {task.text}
                      </span>
                      <div className="flex items-center space-x-3">
                        <span className="text-sm bg-neutral-100 text-neutral-600 px-3 py-1 rounded-full font-medium">
                          {task.priority} –æ—á–∫
                        </span>
                        {task.completed && <CheckCircle className="w-5 h-5 text-emerald-500" />}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 1: // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        const hours = Array.from({ length: 16 }, (_, i) => i + 6);

        return (
          <div className="bg-white rounded-3xl shadow-sm p-8 border border-neutral-100">
            <h3 className="text-2xl font-light text-neutral-900 mb-8">–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏</h3>
            
            <div className="overflow-x-auto">
              <div className="min-w-full" style={{ minWidth: '700px' }}>
                <div className="grid grid-cols-8 gap-2 mb-4">
                  <div className="p-3 text-center font-medium text-neutral-700">–í—Ä–µ–º—è</div>
                  {days.map(day => (
                    <div key={day} className="p-3 text-center font-medium text-neutral-700 bg-neutral-50 rounded-xl">
                      {day}
                    </div>
                  ))}
                </div>

                <div className="space-y-2 max-h-96 overflow-y-auto">
                  {hours.map(hour => (
                    <div key={hour} className="grid grid-cols-8 gap-2">
                      <div className="p-3 text-center font-medium text-neutral-600 bg-neutral-50 rounded-xl min-h-[80px] flex items-center justify-center">
                        {hour}:00
                      </div>
                      {days.map((day, dayIndex) => {
                        const key = `${dayIndex}-${hour}`;
                        return (
                          <textarea
                            key={key}
                            value={weekPlan[key] || ''}
                            onChange={(e) => setWeekPlan(prev => ({ ...prev, [key]: e.target.value }))}
                            placeholder="..."
                            className="p-3 text-sm border border-neutral-200 rounded-xl focus:outline-none focus:border-neutral-400 min-h-[80px] resize-none font-light placeholder-neutral-400"
                          />
                        );
                      })}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        );

      case 2: // –ù–∞–≥—Ä–∞–¥—ã
        return (
          <div className="space-y-8">
            {/* –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã */}
            <div className="bg-gradient-to-r from-emerald-600 to-emerald-700 rounded-3xl p-8 text-white">
              <h3 className="text-2xl font-light mb-2">–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
              <p className="text-emerald-100 font-light mb-8">–û—Ç–º–µ—á–∞–π—Ç–µ –¥–æ—Ö–æ–¥—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ø–µ—Ö–∏</p>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {financialBonuses.map(bonus => (
                  <button
                    key={bonus.id}
                    onClick={() => addFinancialBonus(bonus.id)}
                    className="bg-white bg-opacity-10 border border-white border-opacity-20 rounded-2xl p-6 text-left hover:bg-opacity-20 transition-all backdrop-blur-sm"
                  >
                    <h4 className="font-medium text-lg mb-1">{bonus.name}</h4>
                    <p className="text-emerald-100 text-sm font-light mb-3">{bonus.desc}</p>
                    <p className="text-white font-medium">+{bonus.points} –æ—á–∫–æ–≤</p>
                  </button>
                ))}
              </div>
            </div>

            {/* –ù–∞–≥—Ä–∞–¥—ã */}
            <div className="bg-white rounded-3xl shadow-sm p-8 border border-neutral-100">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h3 className="text-2xl font-light text-neutral-900">–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥</h3>
                  <p className="text-neutral-600 font-light">–¢—Ä–∞—Ç—å—Ç–µ –æ—á–∫–∏ –Ω–∞ –ø—Ä–∏—è—Ç–Ω—ã–µ –≤–µ—â–∏</p>
                </div>
                <div className="text-right">
                  <p className="text-3xl font-light text-neutral-900">{points}</p>
                  <p className="text-neutral-600 font-light">–æ—á–∫–æ–≤</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {rewards.map(reward => {
                  const canClaim = points >= reward.cost && !reward.claimed;
                  return (
                    <div
                      key={reward.id}
                      onClick={() => canClaim && claimReward(reward.id)}
                      className={`p-6 rounded-2xl border transition-all ${
                        reward.claimed
                          ? 'bg-emerald-50 border-emerald-200'
                          : canClaim
                            ? 'bg-white border-neutral-200 hover:border-neutral-300 hover:shadow-md cursor-pointer'
                            : 'bg-neutral-50 border-neutral-200 opacity-60'
                      }`}
                    >
                      <div className="text-center">
                        <div className="mb-4">
                          {reward.claimed ? (
                            <Award className="w-12 h-12 text-emerald-500 mx-auto" />
                          ) : (
                            <Gift className={`w-12 h-12 mx-auto ${canClaim ? 'text-neutral-700' : 'text-neutral-400'}`} />
                          )}
                        </div>
                        <h4 className="font-medium text-neutral-900 mb-3">{reward.name}</h4>
                        <p className={`font-light ${
                          reward.claimed ? 'text-emerald-600' : 
                          canClaim ? 'text-neutral-600' : 'text-red-500'
                        }`}>
                          {reward.claimed ? '–ü–æ–ª—É—á–µ–Ω–æ!' : 
                           canClaim ? `${reward.cost} –æ—á–∫–æ–≤` : 
                           `–ù—É–∂–Ω–æ ${reward.cost} –æ—á–∫–æ–≤`}
                        </p>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        );

      case 3: // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        return (
          <div className="space-y-8">
            <div className="bg-white rounded-3xl shadow-sm p-8 border border-neutral-100">
              <h3 className="text-2xl font-light text-neutral-900 mb-8">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="space-y-4">
                  <h4 className="font-medium text-neutral-800 mb-6">–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h4>
                  {[
                    { label: '–û—á–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ', value: points },
                    { label: '–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', value: week },
                    { label: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∏—Ç—É–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è', value: `${Object.values(rituals).filter(Boolean).length}/20` },
                    { label: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á', value: tasks.filter(t => t.completed).length },
                    { label: '–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏', value: `${Math.round(weekProgress)}%` }
                  ].map((item, i) => (
                    <div key={i} className="flex justify-between items-center p-4 bg-neutral-50 rounded-xl">
                      <span className="text-neutral-700 font-light">{item.label}</span>
                      <span className="font-medium text-neutral-900">{item.value}</span>
                    </div>
                  ))}
                </div>

                <div>
                  <h4 className="font-medium text-neutral-800 mb-6">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h4>
                  <div className="space-y-3 max-h-64 overflow-y-auto">
                    {achievements.length === 0 ? (
                      <p className="text-neutral-500 font-light">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
                    ) : (
                      achievements.slice(-8).reverse().map(achievement => (
                        <div key={achievement.id} className="bg-amber-50 border border-amber-200 rounded-xl p-4">
                          <p className="font-medium text-neutral-800">{achievement.text}</p>
                          <p className="text-xs text-neutral-500 font-light mt-1">{achievement.time}</p>
                        </div>
                      ))
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±—Ä–æ—Å–µ */}
            <div className="bg-neutral-50 rounded-3xl p-8 border border-neutral-200">
              <h4 className="font-medium text-neutral-800 mb-4 flex items-center">
                <RotateCcw className="w-5 h-5 mr-2" />
                –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm font-light text-neutral-600">
                <div>
                  <h5 className="font-medium text-neutral-800 mb-2">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å (00:00)</h5>
                  <ul className="space-y-1">
                    <li>‚Ä¢ –í—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è</li>
                    <li>‚Ä¢ –ó–∞–¥–∞—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è</li>
                    <li>‚Ä¢ –û—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è</li>
                  </ul>
                </div>
                <div>
                  <h5 className="font-medium text-neutral-800 mb-2">–ù–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏</h5>
                  <ul className="space-y-1">
                    <li>‚Ä¢ –°–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º</li>
                    <li>‚Ä¢ "4 —á–∞—Å–∞ –Ω–∞ —É–ª–∏—Ü–µ" –∏ "–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏"</li>
                    <li>‚Ä¢ –ü–æ–º–æ–≥–∞—é—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å</li>
                  </ul>
                </div>
              </div>
              <p className="mt-4 text-neutral-500 text-xs font-light">
                –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±—Ä–æ—Å–∞: {getTimeUntilReset()}
              </p>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-neutral-50" style={{ fontFamily: 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif' }}>
      <div className="container mx-auto px-4 py-6 max-w-7xl">
        
        {/* Header */}
        <div className="text-center py-8 mb-12">
          <div className="flex items-center justify-center space-x-4 mb-4">
            <InteractiveEye />
            <h1 className="text-4xl md:text-6xl font-extralight text-neutral-900 tracking-tight">i.p</h1>
          </div>
          <p className="text-neutral-600 font-light tracking-wide">–°–∏—Å—Ç–µ–º–∞ –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
        </div>

        {/* Navigation */}
        <div className="flex items-center justify-between mb-12">
          <button
            onClick={() => changeScreen('prev')}
            className="p-3 bg-white rounded-full shadow-sm hover:shadow-md transition-all border border-neutral-100"
          >
            <ChevronLeft className="w-6 h-6 text-neutral-600" />
          </button>

          <div className="flex space-x-2">
            {screens.map((screen, index) => {
              const IconComponent = screen.icon;
              return (
                <button
                  key={index}
                  onClick={() => setCurrentScreen(index)}
                  className={`flex items-center space-x-3 px-6 py-3 rounded-2xl font-light transition-all ${
                    currentScreen === index
                      ? 'bg-neutral-900 text-white shadow-md'
                      : 'bg-white text-neutral-600 hover:bg-neutral-50 shadow-sm border border-neutral-100'
                  }`}
                >
                  <IconComponent className="w-5 h-5" />
                  <span className="hidden sm:block tracking-wide">{screen.name}</span>
                </button>
              );
            })}
          </div>

          <button
            onClick={() => changeScreen('next')}
            className="p-3 bg-white rounded-full shadow-sm hover:shadow-md transition-all border border-neutral-100"
          >
            <ChevronRight className="w-6 h-6 text-neutral-600" />
          </button>
        </div>

        {/* Content */}
        <div className="mb-12">
          {renderScreen()}
        </div>

        {/* Footer */}
        <div className="text-center py-8">
          <div className="bg-gradient-to-r from-neutral-800 to-neutral-900 rounded-3xl shadow-sm p-8 text-center">
            <p className="text-white font-light text-lg tracking-wide mb-2">
              "–†–∞–¥—É–µ–º —Å–µ–±—è –Ω–µ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏ –¥–µ–Ω—å–≥–∏,<br className="hidden md:block" /> –∞ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –¥–æ–¥–µ–ª–∞–ª–∏ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞"
            </p>
            <p className="text-neutral-400 font-light tracking-wide">‚Äî –°–∏—Å—Ç–µ–º–∞ –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ */}
      <HelpButton />
    </div>
  );
};

export default App;
